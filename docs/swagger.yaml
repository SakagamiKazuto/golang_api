basePath: /
definitions:
  echo.HTTPError:
    properties:
      message:
        type: object
    type: object
  model.Bosyu:
    properties:
      about:
        type: string
      city:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      level:
        type: string
      message:
        items:
          $ref: '#/definitions/model.Message'
        type: array
      pref:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      user_id:
        type: integer
    type: object
  model.Message:
    properties:
      bosyu_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      message:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.User:
    properties:
      address:
        type: string
      bosyu:
        items:
          $ref: '#/definitions/model.Bosyu'
        type: array
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      mail:
        type: string
      name:
        type: string
      password:
        type: string
      tel:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:9999
info:
  contact: {}
  description: This is goecho api server.
  title: matchihg_portfolio
  version: "1.0"
paths:
  /api/bosyu/create:
    post:
      consumes:
      - application/json
      description: create bosyu in a group
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Bosyu'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: create bosyu
  /api/bosyu/delete:
    delete:
      consumes:
      - application/json
      description: delete bosyu in a group
      parameters:
      - description: bosyu_id which bosyu has
        in: query
        name: bosyu_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Bosyu'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: delete bosyu
  /api/bosyu/get:
    get:
      consumes:
      - application/json
      description: get bosyu in a group
      parameters:
      - description: user_id which has bosyus
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Bosyu'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: get bosyu
  /api/bosyu/update:
    put:
      consumes:
      - application/json
      description: update bosyu in a group
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Bosyu'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: create bosyu
  /login:
    post:
      consumes:
      - application/json
      description: create token in a group
      produces:
      - application/json
      responses:
        "200":
          description: jwt token which you can use to request /api routings
          schema:
            allOf:
            - type: object
            - properties:
                token:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: create jwt token
  /signup:
    post:
      consumes:
      - application/json
      description: create user in a group
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: create user
swagger: "2.0"
